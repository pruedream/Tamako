(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{399:function(a,t,s){"use strict";s.r(t);var e=s(4),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"threadlocal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[a._v("#")]),a._v(" ThreadLocal")]),a._v(" "),t("p",[a._v("ThreadLocal是在多线程编程的环境下，为每个线程创建一个单独的线程变量，互不影响。避免了多个线程同时操作共享变量时产生冲突而带来的一些问题。相比于加锁的操作，体现一种以空间换时间的思想")]),a._v(" "),t("h2",{attrs:{id:"threadlocal的结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal的结构"}},[a._v("#")]),a._v(" ThreadLocal的结构")]),a._v(" "),t("p",[a._v("在早期的版本中，ThreadLocal的实现是每个ThreadLocal实例创建一个Map，然后以thread为key，存放对应的value。而在JDK8中，ThreadLocal的设计是，**每个Thread维护一个 **ThreadLocalMap，这个Map的Key是ThreadLocal实例本身，value是要存储的值。ThreadLocalMap是由ThreadLocal来维护的，采用了懒加载的设计模式，只有在第一次使用get或者set时，才会初始化。\n"),t("img",{attrs:{src:"https://raw.githubusercontent.com/pruedream/PictureBed/main/image/2910022-20230901173316451-945842724.png",alt:"img"}})]),a._v(" "),t("p",[a._v("以下是其主要方法get,set的具体流程")]),a._v(" "),t("p",[a._v("get执行流程：")]),a._v(" "),t("ol",[t("li",[a._v("通过当前线程，获取当前线程维护的ThreadLocalMap。")]),a._v(" "),t("li",[a._v("以ThreadLocal自己为实例（传入this），从Map获取Entry并返回。")]),a._v(" "),t("li",[a._v("如果1中map不存在或者map中没有ThreadLocal对应的key，那么会执行初始化setInitialValue()流程。\nset源码")])]),a._v(" "),t("p",[a._v("set执行流程：")]),a._v(" "),t("ol",[t("li",[a._v("通过当前线程，获取当前线程维护的ThreadLocalMap。")]),a._v(" "),t("li",[a._v("以当前ThreadLocal的实例为key，设置一个value。")]),a._v(" "),t("li",[a._v("如果获取Map时，发现map还为空。那么会调用"),t("code",[a._v("createMap()")]),a._v("方法先创建map。")])]),a._v(" "),t("h2",{attrs:{id:"threadlocalmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocalmap"}},[a._v("#")]),a._v(" ThreadLocalMap")]),a._v(" "),t("p",[a._v("ThreadLocalMap可以说是其中最重要的组成部分，ThreadLocalMap实际上并没有继承Map接口，而是自己实现了Map功能。其内部的Entry也是独立实现的。")]),a._v(" "),t("div",{staticClass:"language-verilog line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-verilog"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ThreadLocalMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ThreadLocal"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<?>")]),a._v(" firstKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" Object firstValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("table")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("INITIAL_CAPACITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" firstKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("threadLocalHashCode "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("INITIAL_CAPACITY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("table")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("Entry")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("firstKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" firstValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    size "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setThreshold")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("INITIAL_CAPACITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("从其构造函数就能看出，其使用ThreadLocal作为key，需要维护的线程变量作为值，并且采用斐波那契散列的方式来计算索引下标。")])])}),[],!1,null,null,null);t.default=r.exports}}]);