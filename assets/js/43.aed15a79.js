(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{369:function(t,a,s){"use strict";s.r(a);var r=s(4),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法刷题思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法刷题思想"}},[t._v("#")]),t._v(" 算法刷题思想")]),t._v(" "),a("h2",{attrs:{id:"去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#去重"}},[t._v("#")]),t._v(" 去重")]),t._v(" "),a("h3",{attrs:{id:"哈希保存元素状态法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希保存元素状态法"}},[t._v("#")]),t._v(" 哈希保存元素状态法")]),t._v(" "),a("p",[t._v("通过哈希表存储已经出现过的元素")]),t._v(" "),a("h3",{attrs:{id:"双指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),a("p",[t._v("先排序，再基于排序的基础上按照具体情况进行去重 如三数之和，以及回溯中需要去重的题")]),t._v(" "),a("h2",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),a("p",[a("strong",[t._v("对于递归算法，最重要的就是明确递归函数的定义")]),t._v("，不要跳进递归（你的脑袋能压几个栈呀？），而是要根据刚才的函数定义，来弄清楚这段代码会产生什么结果：")]),t._v(" "),a("p",[t._v("往下的过程就是递，再从下返回上的过程就是归")]),t._v(" "),a("p",[t._v("在向下的过程中把问题解决，还是在回退的过程中把问题解决，注意与回溯的联系，进行对比")]),t._v(" "),a("p",[t._v("快速排序                            反转链表                                   全排列")]),t._v(" "),a("p",[t._v("基本就是处理逻辑是在递归代码前还是后")]),t._v(" "),a("h3",{attrs:{id:"无返回值的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无返回值的"}},[t._v("#")]),t._v(" 无返回值的")]),t._v(" "),a("p",[t._v("在递的过程中解决问题")]),t._v(" "),a("p",[t._v("处理逻辑是在递归代码之前的，也就是说，他不需要自己下层的递归函数有任何返回值来帮助进行程序的运行，")]),t._v(" "),a("p",[t._v("解决问题是从上往下解决问题。")]),t._v(" "),a("h3",{attrs:{id:"有返回值的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有返回值的"}},[t._v("#")]),t._v(" 有返回值的")]),t._v(" "),a("p",[t._v("在归的过程中解决问题")]),t._v(" "),a("p",[t._v("处理逻辑是在递归代码之后的，也就是说，他需要自己下层的递归函数有任何返回值来帮助进行程序的运行，")]),t._v(" "),a("p",[t._v("解决问题是从下往上执行问题，因为上面的递归函数需要下面的递归函数的返回值来帮助程序运行。")]),t._v(" "),a("h3",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("p",[t._v("上面举例的无返回值与有返回值，实际上并不准确，因为无返回值也可以在归中解决问题，有返回值也能再递中解决问题，"),a("strong",[t._v("总结就是递归有两种解决方法：从上往下，递中解决，处理逻辑是在递归代码之前。从下往上，归中解决，处理逻辑是在递归代码之后的。")]),t._v(" 补充： 处理逻辑是在递归代码之前与处理逻辑是在递归代码之后，并不是该两中方法各自的特点，而是都能存在于对方的方法中，"),a("strong",[t._v("实际上关键在于，你想在递归前做些事情就写在递归代码前，想在递归后做些事情就写在递归代码后。")])]),t._v(" "),a("h2",{attrs:{id:"回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[t._v("#")]),t._v(" 回溯")]),t._v(" "),a("h3",{attrs:{id:"去重问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#去重问题"}},[t._v("#")]),t._v(" 去重问题")]),t._v(" "),a("h2",{attrs:{id:"链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),a("h3",{attrs:{id:"反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反转"}},[t._v("#")]),t._v(" 反转")])])}),[],!1,null,null,null);a.default=v.exports}}]);