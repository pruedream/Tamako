(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{420:function(t,_,v){"use strict";v.r(_);var a=v(4),s=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"cap理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap理论"}},[t._v("#")]),t._v(" CAP理论")]),t._v(" "),_("p",[t._v("CAP理论是分布式系统设计的指导思想")]),t._v(" "),_("p",[t._v("在理论计算机科学中，CAP 定理（CAP theorem）指出对于一个分布式系统来说，当设计读写操作时，只能能同时满足以下三点中的两个：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("一致性（Consistence）")]),t._v(" : 所有节点访问同一份最新的数据副本")]),t._v(" "),_("li",[_("strong",[t._v("可用性（Availability）")]),t._v(": 非故障的节点在合理的时间内返回合理的响应（不是错误或者超时的响应）。")]),t._v(" "),_("li",[_("strong",[t._v("分区容错性（Partition tolerance）")]),t._v(" : 分布式系统出现网络分区的时候，仍然能够对外提供服务。")])]),t._v(" "),_("p",[t._v("注意不是3选2")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能 2 选 1。也就是说当网络分区之后 P 是前提，决定了 P 之后才有 C 和 A 的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。")]),t._v("    并且分区容错性的实现需要在一致性和可用性之间做取舍")]),t._v(" "),_("p",[t._v("简而言之就是：CAP 理论中分区容错性 P 是一定要满足的，在此基础上，只能满足可用性 A 或者一致性 C。")])]),t._v(" "),_("p",[t._v("因此，**分布式系统理论上不可能选择 CA 架构，只能选择 CP 或者 AP 架构。**因为如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的。")]),t._v(" "),_("h2",{attrs:{id:"ca无法同时保证的原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ca无法同时保证的原因"}},[t._v("#")]),t._v(" CA无法同时保证的原因")]),t._v(" "),_("blockquote",[_("p",[t._v("举个例子，当系统出现分区的时候，c节点进行写操作，由于出现了分区，节点之间的数据不流通，同步不到其他节点，为了保证整个系统的一致性，就需要对其他的节点的读写操作进行禁止，因为会与C节点的数据产生不一致，但其他节点任然是健康的，能够对外提供服务，为保证一致性，就必须要使其暂时不提供服务，这就违背了可用性，相反，如果允许其他节点的读写操作，就违背的一致性。")])]),t._v(" "),_("h1",{attrs:{id:"base-理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base-理论"}},[t._v("#")]),t._v(" BASE 理论")]),t._v(" "),_("p",[_("strong",[t._v("BASE")]),t._v(" 是 "),_("strong",[t._v("Basically Available（基本可用）")]),t._v(" 、"),_("strong",[t._v("Soft-state（软状态）")]),t._v(" 和 "),_("strong",[t._v("Eventually Consistent（最终一致性）")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"基本要素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本要素"}},[t._v("#")]),t._v(" 基本要素")]),t._v(" "),_("h4",{attrs:{id:"_1-基本可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本可用"}},[t._v("#")]),t._v(" 1. 基本可用")]),t._v(" "),_("p",[t._v("基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用。")]),t._v(" "),_("p",[_("strong",[t._v("什么叫允许损失部分可用性呢？")])]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("响应时间上的损失")]),t._v(": 正常情况下，处理用户请求需要 0.5s 返回结果，但是由于系统出现故障，处理用户请求的时间变为 3 s。")]),t._v(" "),_("li",[_("strong",[t._v("系统功能上的损失")]),t._v("：正常情况下，用户可以使用系统的全部功能，但是由于系统访问量突然剧增，系统的部分非核心功能无法使用。")])]),t._v(" "),_("h4",{attrs:{id:"_2-软状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-软状态"}},[t._v("#")]),t._v(" 2. 软状态")]),t._v(" "),_("p",[t._v("软状态指允许系统中的数据存在中间状态（"),_("strong",[t._v("CAP 理论中的数据不一致")]),t._v("），并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。")]),t._v(" "),_("h4",{attrs:{id:"_3-最终一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-最终一致性"}},[t._v("#")]),t._v(" 3. 最终一致性")]),t._v(" "),_("p",[t._v("最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。")]),t._v(" "),_("blockquote",[_("p",[t._v("分布式一致性的 3 种级别：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("强一致性")]),t._v(" ：系统写入了什么，读出来的就是什么。")]),t._v(" "),_("li",[_("strong",[t._v("弱一致性")]),t._v(" ：不一定可以读取到最新写入的值，也不保证多少时间之后读取到的数据是最新的，只是会尽量保证某个时刻达到数据一致的状态。")]),t._v(" "),_("li",[_("strong",[t._v("最终一致性")]),t._v(" ：弱一致性的升级版。，系统会保证在一定时间内达到数据一致的状态，")])]),t._v(" "),_("p",[_("strong",[t._v("业界比较推崇是最终一致性级别，但是某些对数据一致要求十分严格的场景比如银行转账还是要保证强一致性。")])])]),t._v(" "),_("h2",{attrs:{id:"核心思想"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#核心思想"}},[t._v("#")]),t._v(" 核心思想")]),t._v(" "),_("p",[t._v("BASE理论强调"),_("strong",[t._v("牺牲数据的强一致性")]),t._v("来满足系统的高可用性，采用最终一致性来代替强一致性。系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。  BASE理论是对CAP理论中的AP方案的完善。")]),t._v(" "),_("h1",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[_("strong",[t._v("ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);