(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{394:function(e,s,n){"use strict";n.r(s);var a=n(4),t=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),s("p",[e._v("最近在完成自己的个人抽奖项目之后，想着为项目提供一个抽奖入口。分析后选择使用公众号来作为入口。")]),e._v(" "),s("p",[e._v("以下是公众号的具体接入流程。")]),e._v(" "),s("h2",{attrs:{id:"具体接入流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体接入流程"}},[e._v("#")]),e._v(" 具体接入流程")]),e._v(" "),s("h3",{attrs:{id:"创建自己的公众号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建自己的公众号"}},[e._v("#")]),e._v(" 创建自己的公众号")]),e._v(" "),s("p",[e._v("具体步骤可以去网上搜，网上资源很多的照着来就好。这里就简单贴一个")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/106238888",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何建立一个微信公众号（个人)"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"接入自己的服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接入自己的服务器"}},[e._v("#")]),e._v(" 接入自己的服务器")]),e._v(" "),s("p",[e._v("公众号是可以设置相关回复的，但前提是你自己没有对接自己的服务器，一旦对接了自己的服务器，相关的能力将会失效。")]),e._v(" "),s("h4",{attrs:{id:"第一步-填写服务器配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-填写服务器配置"}},[e._v("#")]),e._v(" 第一步：填写服务器配置")]),e._v(" "),s("p",[e._v("登录微信公众平台官网后，在公众平台官网的开发-基本设置页面，勾选协议成为开发者，点击“修改配置”按钮，填写服务器地址（URL）、Token和EncodingAESKey，其中URL是开发者用来接收微信消息和事件的接口URL。Token可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。EncodingAESKey由开发者手动填写或随机生成，将用作消息体加解密密钥。")]),e._v(" "),s("p",[e._v("同时，开发者可选择消息加解密方式：明文模式、兼容模式和安全模式。模式的选择与服务器配置在提交后都会立即生效，请开发者谨慎填写及选择。加解密方式的默认状态为明文模式，选择兼容模式和安全模式需要提前配置好相关加解密代码，"),s("a",{attrs:{href:"https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/2.0/api/Before_Develop/Message_encryption_and_decryption.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("详情请参考消息体签名及加解密部分的文档"),s("OutboundLink")],1),e._v(" 。")]),e._v(" "),s("h4",{attrs:{id:"第二步-验证消息的确来自微信服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-验证消息的确来自微信服务器"}},[e._v("#")]),e._v(" 第二步：验证消息的确来自微信服务器")]),e._v(" "),s("p",[e._v("开发者提交信息后，微信服务器将发送GET请求到填写的服务器地址URL上 。该请求是微信为了验证该服务器的有效性")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/**\n * 处理微信服务器发来的get请求，进行签名的验证\n * <p>\n * appid     微信端AppID\n * signature 微信端发来的签名\n * timestamp 微信端发来的时间戳\n * nonce     微信端发来的随机字符串\n * echostr   微信端发来的验证字符串\n */\n@GetMapping(produces = "text/plain;charset=utf-8")\npublic String validate(@PathVariable String appid,\n                       @RequestParam(value = "signature", required = false) String signature,\n                       @RequestParam(value = "timestamp", required = false) String timestamp,\n                       @RequestParam(value = "nonce", required = false) String nonce,\n                       @RequestParam(value = "echostr", required = false) String echostr) {\n    try {\n        logger.info("微信公众号验签信息{}开始 [{}, {}, {}, {}]", appid, signature, timestamp, nonce, echostr);\n        if (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) {\n            throw new IllegalArgumentException("请求参数非法，请核实!");\n        }\n        boolean check = wxValidateService.checkSign(signature, timestamp, nonce);\n        logger.info("微信公众号验签信息{}完成 check：{}", appid, check);\n        if (!check) {\n            return null;\n        }\n        return echostr;\n    } catch (Exception e) {\n        logger.error("微信公众号验签信息{}失败 [{}, {}, {}, {}]", appid, signature, timestamp, nonce, echostr, e);\n        return null;\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br")])]),s("h4",{attrs:{id:"第三步-依据接口文档实现业务逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-依据接口文档实现业务逻辑"}},[e._v("#")]),e._v(" 第三步：依据接口文档实现业务逻辑")]),e._v(" "),s("p",[e._v("验证成功后，就可以基于之前配置的地址与微信服务器进行对接。微信服务器将基于配置的地址发送post请求，携带公众号内的相关数据信息。 我们就可以基于这个接口向下游开发相关的业务。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('/**\n * 此处是处理微信服务器的消息转发的\n */\n@PostMapping(produces = "application/xml; charset=UTF-8")\npublic String post(@PathVariable String appid,\n                   @RequestBody String requestBody,\n                   @RequestParam("signature") String signature,\n                   @RequestParam("timestamp") String timestamp,\n                   @RequestParam("nonce") String nonce,\n                   @RequestParam("openid") String openid,\n                   @RequestParam(name = "encrypt_type", required = false) String encType,\n                   @RequestParam(name = "msg_signature", required = false) String msgSignature) {\n    try {\n        logger.info("接收微信公众号信息请求{}开始 {}", openid, requestBody);\n        MessageTextEntity message = XmlUtil.xmlToBean(requestBody, MessageTextEntity.class);\n        BehaviorMatter behaviorMatter = new BehaviorMatter();\n        behaviorMatter.setOpenId(openid);\n        behaviorMatter.setFromUserName(message.getFromUserName());\n        behaviorMatter.setMsgType(message.getMsgType());\n        behaviorMatter.setContent(StringUtils.isBlank(message.getContent()) ? null : message.getContent().trim());\n        behaviorMatter.setEvent(message.getEvent());\n        behaviorMatter.setCreateTime(new Date(Long.parseLong(message.getCreateTime()) * 1000L));\n        // 处理消息\n        String result = wxReceiveService.doReceive(behaviorMatter);\n        logger.info("接收微信公众号信息请求{}完成 {}", openid, result);\n        return result;\n    } catch (Exception e) {\n        logger.error("接收微信公众号信息请求{}失败 {}", openid, requestBody,e);\n        return "";\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br")])]),s("p",[e._v("以上就是公共号对接的具体流程，不得不说，公众号的文档的阅读性还是可以的，没有花费太多时间就对接好了。")])])}),[],!1,null,null,null);s.default=t.exports}}]);